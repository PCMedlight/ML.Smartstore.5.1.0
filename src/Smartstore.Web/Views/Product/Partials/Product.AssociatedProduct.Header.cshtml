@using Smartstore.Core.Catalog.Products
@using Smartstore.Core.Checkout.Cart
@using Smartstore.Web.Models.Catalog

@model ProductDetailsModel

@{
    var config = ViewData["GroupedProductConfiguration"] as GroupedProductConfiguration;
    var id = $"associated-product{Model.Id}";
    var gallery = Model.MediaGalleryModel;
    var img = gallery?.Files?.FirstOrDefault();
}

<div class="pd-assoc-title card-title row no-gutters"
     aria-expanded="false" 
     role="button" 
     data-target="#@id" 
     aria-controls="@id">
    <div class="col-auto d-flex">
        <div sm-if="@config.HasHeader(AssociatedProductHeader.Image)" class="pd-assoc-img">
            @if (img != null)
            {
                <img src="@img.GetUrl(gallery.ThumbSize)" alt="@(img?.Alt)" title="@(img?.TitleAttribute)" />
            }
            else if (gallery.ThumbFallbackUrl.HasValue())
            {
                <img src="@gallery.ThumbFallbackUrl" alt="@gallery.DefaultAlt" />
            }
        </div>
    </div>
    <div class="col">
        <div class="row xs-gutters">
            <div class="col-12 col-md-3 d-flex align-items-center">
                <div class="pd-assoc-name text-truncate" title="@Model.Name">
                    @Html.Raw(Model.Name)
                </div>
            </div>
            <div class="col-6 col-md-4 d-none d-md-flex flex-column flex-lg-row align-items-start justify-content-center align-items-lg-center fs-sm">
                <div sm-if="@config.HasHeader(AssociatedProductHeader.Sku)" class="pd-assoc-attr" title="@Model.Sku">
                    @Model.Sku
                </div>
                <div sm-if="@config.HasHeader(AssociatedProductHeader.Dimensions)" class="pd-assoc-attr" title="@GetFormattedDimensions(true)">
                    @GetFormattedDimensions(false)
                </div>
                <div sm-if="@config.HasHeader(AssociatedProductHeader.Weight)" class="pd-assoc-attr" title="@Model.Weight">
                    @Model.Weight
                </div>
            </div>
            <div class="col-6 col-md-2 d-flex mt-2 mt-md-0 align-items-center justify-content-start justify-content-md-end">
                <span sm-if="@config.HasHeader(AssociatedProductHeader.Price)" class="pd-assoc-price">
                    @Html.Raw(Model.Price.FinalPrice)
                </span>
            </div>
            <div class="col-6 col-md-3 d-flex mt-2 mt-md-0 align-items-center">
                <div class="pd-assoc-actions">
                    <div sm-if="!Model.AddToCart.HideQuantityControl" class="pd-qty-input-container pd-interaction">
                        @Html.EditorFor(x => Model.AddToCart, "QtyInput", new { size = ControlSize.Small })
                    </div>
                    <a class="pd-interaction btn btn-primary btn-sm btn-icon btn-add-to-cart ajax-cart-link ml-1"
                       href="javascript:;"
                       rel="nofollow"
                       data-href="@Url.Action("AddProduct", "ShoppingCart", new { productId = Model.AddToCart.ProductId, shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart })"
                       data-form-selector="#pd-form"
                       data-type="cart"
                       data-action="add"
                       data-toggle="offcanvas" 
                       data-target="#offcanvas-cart"
                       title="@T(Model.AddToCart.AvailableForPreOrder ? "ShoppingCart.PreOrder" : "ShoppingCart.AddToCart")">
                        <i class="fa fa-cart-arrow-down"></i>
                    </a>
                </div>
                <i class="fas fa-angle-up collapse-chevron m-0 ml-2"></i>
            </div>
        </div>
    </div>
</div>

@{
    string GetFormattedDimensions(bool full)
    {
        var w = Model.WidthValue;
        var h = Model.HeightValue;
        var l = Model.LengthValue;

        if (w == 0 && h == 0 && l == 0)
            return string.Empty;

        var wStr = w.ToString("G29");
        var hStr = h.ToString("G29");
        var lStr = l.ToString("G29");

        if (full)
            return T("Products.DimensionsValue.Full").Value.FormatInvariant(wStr, hStr, lStr, Model.DimensionSystemKeyword);

        return T("Products.DimensionsValue.Short").Value.FormatInvariant(wStr, hStr, lStr);
    }
}